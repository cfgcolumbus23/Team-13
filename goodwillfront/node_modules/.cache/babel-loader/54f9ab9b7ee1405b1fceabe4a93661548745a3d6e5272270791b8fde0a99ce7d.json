{"ast":null,"code":"var _jsxFileName = \"/Users/suvan/Documents/CodeForGood/Team-13/goodwillfront/src/components/PostButton/PostButton.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n\n// function PostButton() {\n//     const [isPopupOpen, setIsPopupOpen] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n\n//     const openPopup = () => setIsPopupOpen(true);\n//     const closePopup = () => setIsPopupOpen(false);\n\n//     const handleMessageChange = (e) => setMessage(e.target.value);\n\n//     const postMessage = () => {\n//         if (message.trim()) {\n//             setMessages([...messages, message]);\n//             setMessage(''); // Clear the input after posting\n//             closePopup();\n//             //call another service or send the message array to an API or backend\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <button onClick={openPopup}>Post a Message</button>\n//             {isPopupOpen && (\n//                 <div className=\"popup\">\n//                     <textarea\n//                         value={message}\n//                         onChange={handleMessageChange}\n//                         placeholder=\"Type your message here...\"\n//                     />\n//                     <button onClick={postMessage}>Post</button>\n//                     <button onClick={closePopup}>Cancel</button>\n//                 </div>\n//             )}\n//             <div className=\"messages-container\">\n//                 {messages.map((msg, index) => (\n//                     <div key={index}>{msg}</div>\n//                 ))}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default PostButton;\n\n// File: PostButton.js\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PostButton() {\n  _s();\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [messageData, setMessageData] = useState({\n    username: '',\n    message: ''\n  });\n  const openPopup = () => setIsPopupOpen(true);\n  const closePopup = () => setIsPopupOpen(false);\n  const handleMessageChange = e => {\n    setMessageData({\n      ...messageData,\n      message: e.target.value\n    });\n  };\n  const handleUsernameChange = e => {\n    setMessageData({\n      ...messageData,\n      username: e.target.value\n    });\n  };\n  const postMessage = () => {\n    if (messageData.message.trim()) {\n      // Send the message to the Flask backend\n      fetch('http://localhost:5000/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(messageData)\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      }).then(data => {\n        console.log('Message posted:', data);\n        setMessageData({\n          username: '',\n          message: ''\n        }); // Clear the form after posting\n        closePopup();\n      }).catch(error => {\n        console.error('There was a problem with the fetch operation:', error);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: openPopup,\n      children: \"Post a Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), isPopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: messageData.username,\n        onChange: handleUsernameChange,\n        placeholder: \"Your username...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: messageData.message,\n        onChange: handleMessageChange,\n        placeholder: \"Type your message here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: postMessage,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: closePopup,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(PostButton, \"yt11kYwTsvQwdOdSu40By0J0zWU=\");\n_c = PostButton;\nexport default PostButton;\nvar _c;\n$RefreshReg$(_c, \"PostButton\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PostButton","_s","isPopupOpen","setIsPopupOpen","messageData","setMessageData","username","message","openPopup","closePopup","handleMessageChange","e","target","value","handleUsernameChange","postMessage","trim","fetch","method","headers","body","JSON","stringify","then","response","ok","Error","json","data","console","log","catch","error","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","type","onChange","placeholder","_c","$RefreshReg$"],"sources":["/Users/suvan/Documents/CodeForGood/Team-13/goodwillfront/src/components/PostButton/PostButton.js"],"sourcesContent":["// import React, { useState } from 'react';\n\n// function PostButton() {\n//     const [isPopupOpen, setIsPopupOpen] = useState(false);\n//     const [message, setMessage] = useState('');\n//     const [messages, setMessages] = useState([]);\n\n//     const openPopup = () => setIsPopupOpen(true);\n//     const closePopup = () => setIsPopupOpen(false);\n\n//     const handleMessageChange = (e) => setMessage(e.target.value);\n\n//     const postMessage = () => {\n//         if (message.trim()) {\n//             setMessages([...messages, message]);\n//             setMessage(''); // Clear the input after posting\n//             closePopup();\n//             //call another service or send the message array to an API or backend\n//         }\n//     };\n\n//     return (\n//         <div>\n//             <button onClick={openPopup}>Post a Message</button>\n//             {isPopupOpen && (\n//                 <div className=\"popup\">\n//                     <textarea\n//                         value={message}\n//                         onChange={handleMessageChange}\n//                         placeholder=\"Type your message here...\"\n//                     />\n//                     <button onClick={postMessage}>Post</button>\n//                     <button onClick={closePopup}>Cancel</button>\n//                 </div>\n//             )}\n//             <div className=\"messages-container\">\n//                 {messages.map((msg, index) => (\n//                     <div key={index}>{msg}</div>\n//                 ))}\n//             </div>\n//         </div>\n//     );\n// }\n\n// export default PostButton;\n\n\n// File: PostButton.js\nimport React, { useState } from 'react';\n\nfunction PostButton() {\n  const [isPopupOpen, setIsPopupOpen] = useState(false);\n  const [messageData, setMessageData] = useState({ username: '', message: '' });\n\n  const openPopup = () => setIsPopupOpen(true);\n  const closePopup = () => setIsPopupOpen(false);\n\n  const handleMessageChange = (e) => {\n    setMessageData({ ...messageData, message: e.target.value });\n  };\n\n  const handleUsernameChange = (e) => {\n    setMessageData({ ...messageData, username: e.target.value });\n  };\n\n  const postMessage = () => {\n    if (messageData.message.trim()) {\n      // Send the message to the Flask backend\n      fetch('http://localhost:5000/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(messageData)\n      })\n      .then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('Message posted:', data);\n        setMessageData({ username: '', message: '' }); // Clear the form after posting\n        closePopup();\n      })\n      .catch(error => {\n        console.error('There was a problem with the fetch operation:', error);\n      });\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={openPopup}>Post a Message</button>\n      {isPopupOpen && (\n        <div className=\"popup\">\n          <input\n            type=\"text\"\n            value={messageData.username}\n            onChange={handleUsernameChange}\n            placeholder=\"Your username...\"\n          />\n          <textarea\n            value={messageData.message}\n            onChange={handleMessageChange}\n            placeholder=\"Type your message here...\"\n          />\n          <button onClick={postMessage}>Post</button>\n          <button onClick={closePopup}>Cancel</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default PostButton;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}